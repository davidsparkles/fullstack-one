#type User @table @check(notGenericAddress:"email != 'mail@fullstack.build' AND email != 'info@fullstack.build'"){
type User @table @auth @versioning @check(notGenericAddress:"(((email)::text <> 'mail@fullstack.build'::text) AND ((email)::text <> 'info@fullstack.build'::text))"){
  id: ID! @unique
  tenantId: String @tenant @default(value: "default")
  email: String @unique @username @default(value: "test@test.de") @validate(isEmail:null, contains: "fullstack.build")
  password: String @password
  gender: Gender
  firstLetterOfUserName: String @computed(expression: "FirstNOfField", params: {n: 1, field: "email"})
  payload: Payload @json @migrate(from:"payloadOld")
  posts: [Post!]! @relation(name: "PostOwner")
  postContributions: [Post!]! @relation(name: "PostContributors")
  stripeAccount: String @custom(resolver: "stripeAccount")
  testDefault: String @type(name: "Date") @default(expression: "now()")
  acceptedPrivacyTermsAt: String
  acceptedPrivacyTermsVersion: Int
  updatedAt: String @updatedAt
  createdAt: String @createdAt
  #startTimeInUTC: String! @type(name:"timestamp")
  #type: UserType
  #privatePayload: PrivatePayload @subtype(fieldName: "type", value: "private")
  #businessPayload: BusinessPayload @subtype(fieldName: "type", value: "business")
}


type PayloadData {
  title: String
  content: String
}

type Payload {
  data: PayloadData
  secret: Int!
}

input PayloadDataInput {
  title: String!
  content: String!
}

input PayloadInput {
  data: PayloadDataInput!
  secret: Int!
}

#type Adress {
#  city: String
#  street: String
#  fullname: String
#}

#type Location {
#  lgt: Int
#  long: Int
#}

#type Personal {
#  size: Int
#  location: Location
#}

#type UserPayload {
#  address: Address
#  personal: Personal
#}

#type PrivatePayload {
#  brithday: String
#  address: String
#}

#type BusinessPayload {
#  company: String
#  address: String
#}

type AdditionPayload {
  sum: Int!
}

extend type Query {
  add(a: Int! b: Int!): AdditionPayload @custom(resolver: "add")
}

enum UserType {
  private
  business
}

enum Gender {
  male
  female
}
