
type AccessTokenPayload {
  userId: ID!,
  provider: String!,
  timestamp: String!,
  userToken: String!,
  userTokenMaxAgeInSeconds: Int!
}

type LoginData {
  userId: ID!,
  refreshToken: String,
  accessToken: String,
  sessionExpirationTimestamp: String!
  payload: AccessTokenPayload
}

type TokenMeta {
  isValid: Boolean!,
  userId: ID!,
  provider: String!,
  timestamp: String!,
  issuedAt: Int!,
  expiresAt: Int!
}

type PrivacyToken {
  privacyToken: String!,
  acceptedAtInUTC: String!,
  acceptedVersion: Int!
}

extend type Mutation {

  """
  Login a user. Get back an accessToken and metadata about it.
  """
  login(username: String!, tenant: String, password: String, authToken: String): LoginData @custom(resolver: "@fullstack-one/auth/login")

  """
  Creates a temporary token and sends it to the user, to create a new password.

  You can provide `meta` information. This can help if you want to send different emails depending on the client of the user (Native App, Webapp, Desktop, ...). Another use-case could be to use this mutation to re-send a registration-email.
  """
  forgotPassword(username: String!, tenant: String, meta: String): Boolean @custom(resolver: "@fullstack-one/auth/forgotPassword")

  """
  Set a new password with a temporary token. This will invalidate all other sessions.
  """
  setPassword(accessToken: String, password: String!): Boolean @custom(resolver: "@fullstack-one/auth/setPassword")

  """
  Invalidates the given accessToken and deletes the auth cookie if set.
  """
  invalidateUserToken: Boolean @custom(resolver: "@fullstack-one/auth/invalidateUserToken")

  """
  Invalidates all accessTokens ever issued to the user and deletes the auth cookie if set.
  """
  invalidateAllUserTokens: Boolean @custom(resolver: "@fullstack-one/auth/invalidateAllUserTokens")

  """
  Sets the given accessToken into a cookie. With a set cookie, normal queries an mutations are authorized. However, auth mutations will ignore this cookie.
  """
  refreshUserToken(refreshToken: String!): LoginData @custom(resolver: "@fullstack-one/auth/refreshUserToken")

  """
  Creates a JWT-Token which verifies the user-approval of the privacy terms
  """
  createPrivacyToken(acceptedVersion: Int!): PrivacyToken @custom(resolver: "@fullstack-one/auth/createPrivacyToken")
}

extend type Query {
  """
  Tells if the given token is valid and gives some meta information.
  """
  getTokenMeta(accessToken: String, tempToken: Boolean, tempTokenExpiration: Boolean): TokenMeta @custom(resolver: "@fullstack-one/auth/getTokenMeta")

}